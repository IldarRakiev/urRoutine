import firebase_admin
from firebase_admin import credentials, db
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, Application
from datetime import datetime, timedelta
import asyncio
import os, sys, logging, json
from dotenv import load_dotenv
from math import ceil

load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º JSON-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
firebase_config = json.loads(os.getenv('FIREBASE_KEY'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
cred = credentials.Certificate(firebase_config)
firebase_admin.initialize_app(cred, {
    "databaseURL": "https://urroutine-default-rtdb.firebaseio.com"
})

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PRIORITIES = {"urgent": 4, "high": 3, "medium": 2, "low": 1}

# ------------------- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è -------------------

async def init_schedule(user_id: str, days_ahead: int = 30):
    print("init started")
    schedule_ref = db.reference(f"schedule/{user_id}")
    
    def sync_create_schedule():
        print("sync started")
        today = datetime.now()
        existing_schedule = schedule_ref.get() or {}
        
        for day_offset in range(days_ahead):
            current_date = today + timedelta(days=day_offset)
            date_str = current_date.strftime("%Y-%m-%d")
            day_of_week = current_date.strftime("%A").lower()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            day_schedule = existing_schedule.get(date_str, {})
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Å–Ω–∞ (01:00‚Äì07:30), –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
            for hour in range(1, 8):
                for minute in [0, 30]:
                    time_key = f"{hour:02d}:{minute:02d}"
                    if time_key not in day_schedule:
                        day_schedule[time_key] = {"type": "sleep", "task": None}

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –±–ª–æ–∫–∏ (08:00-00:30), –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
            for hour in [*range(8, 24), 0]:  # –î–æ–±–∞–≤–ª—è–µ–º 0 –¥–ª—è 00:00-00:30
                for minute in [0, 30]:
                    time_key = f"{hour:02d}:{minute:02d}"
                    if time_key not in day_schedule:
                        day_schedule[time_key] = {"type": "free", "task": None}             

            # 3. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –±–ª–æ–∫–∏ (–ª–µ–∫—Ü–∏–∏) —Å–æ–≥–ª–∞—Å–Ω–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
            lecture_times = []
            if day_of_week == "monday":
                lecture_times = ["09:00", "09:30", "10:00"]
                lecture_task = "–õ–µ–∫—Ü–∏—è –ø–æ ML"
            elif day_of_week == "tuesday":
                lecture_times = ["12:30", "13:00", "13:30", "14:00"]
                lecture_task = "–õ–∞–±. –ø–æ ML"
            elif day_of_week == "thursday":
                lecture_times = ["12:30", "13:00", "13:30", "14:00"]
                lecture_task = "–õ–∞–±. –ø–æ –ë–î"
            elif day_of_week == "friday":
                lecture_times = ["17:30", "18:00", "18:30", "19:00"]
                lecture_task = "–õ–∞–±. –ø–æ —Å–µ—Ç—è–º"
 
            
            for time in lecture_times:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫ –Ω–µ –∑–∞–Ω—è—Ç –∏–ª–∏ —ç—Ç–æ –ª–µ–∫—Ü–∏—è
                day_schedule[time] = {
                    "type": "lecture",
                    "task": lecture_task
                }

            schedule_ref.child(date_str).set(day_schedule)
            
        
    await asyncio.to_thread(sync_create_schedule)

# ------------------- 2. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -------------------
async def start(update: Update, context: CallbackContext):
    user_id = str(update.message.chat.id)
    
    try:
        await init_schedule(user_id)
        menu = ReplyKeyboardMarkup([
            ["üóÇ –ó–∞–¥–∞—á–∏", "üìù –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å"],
            ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ], resize_keyboard=True)
        
        await update.message.reply_text("üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", reply_markup=menu, parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ------------------- 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ -------------------
async def add_task_start(update: Update, context: CallbackContext):
    context.user_data['expecting_priority'] = True 
    buttons = [
        [InlineKeyboardButton("–ê–≤—Ç–æ", callback_data="auto")],
        [InlineKeyboardButton("–í—Ä—É—á–Ω—É—é", callback_data="manual")]
    ]
    await update.message.reply_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def ask_priority(update: Update, context: CallbackContext):

    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    context.user_data['task_mode'] = query.data

    buttons = [
        [InlineKeyboardButton("–°—Ä–æ—á–Ω–æ üî¥", callback_data="urgent üî¥")],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π üü†", callback_data="high üü†")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π üü°", callback_data="medium üü°")],
        [InlineKeyboardButton("–ù–∏–∑–∫–∏–π ‚ö™", callback_data="low ‚ö™")]
    ]
    await update.callback_query.edit_message_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_task_input(update: Update, context: CallbackContext):
    user_id = str(update.effective_chat.id)
    user_data = context.user_data
    
    if update.callback_query:
        print(f"–∫–∞–ª–ª–±–µ–∫")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        query = update.callback_query
        priority = query.data
        context.user_data['task_data'] = {'priority': priority}
        context.user_data['task_state'] = 'awaiting_name'
        context.user_data['expecting_priority'] = False
        
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return
    
    elif update.message:
        print(f"—Ç–æ —á—Ç–æ –Ω–∞–¥–æ")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text = update.message.text
        user_data = context.user_data

        # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        if 'task_state' not in user_data:
            #–ï—Å–ª–∏ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –Ω–µ —Å –∫–Ω–æ–ø–æ–∫,
            # –∞ –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            user_data['task_state'] = 'awaiting_priority'  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!
            buttons = [
                [InlineKeyboardButton("–°—Ä–æ—á–Ω–æ üî¥", callback_data="urgent üî¥")],
                [InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π üü†", callback_data="high üü†")],
                [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π üü°", callback_data="medium üü°")],
                [InlineKeyboardButton("–ù–∏–∑–∫–∏–π ‚ö™", callback_data="low ‚ö™")]
            ]
            await update.message.reply_text(
                "üìå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            return

        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if user_data['task_state'] == 'awaiting_name':
            if len(text) > 100:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
                
            user_data['task_data']['name'] = text
            user_data['task_state'] = 'awaiting_time'
            await update.message.reply_text("‚è≥ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞ –∑–∞–¥–∞—á—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5)")
            return

        # –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
        elif user_data['task_state'] == 'awaiting_time':
            try:
                time_required = float(text)
                if time_required <= 0:
                    await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                    return
                    
                user_data['task_data']['time_required'] = time_required
                user_data['task_state'] = 'awaiting_deadline'
                await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024):")
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –∏–ª–∏ 1.5).")
            return

        # –≠—Ç–∞–ø 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        elif user_data['task_state'] == 'awaiting_deadline':
            try:
                deadline = datetime.strptime(text, "%d.%m.%Y").strftime("%Y-%m-%d")
                if deadline < datetime.now().strftime("%Y-%m-%d"):
                    await update.message.reply_text("‚ùå –î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
                    return
                    
                user_data['task_data']['deadline'] = deadline
                user_data['task_state'] = 'awaiting_notes'
                await update.message.reply_text("üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        # –≠—Ç–∞–ø 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞
        elif user_data['task_state'] == 'awaiting_notes':
            if text:
                user_data['task_data']['notes'] = text
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É
            task_ref = db.reference(f"tasks/{user_id}").push()
            task_id = task_ref.key
            user_data['task_data']['created_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(user_data['task_data'])
            task_ref.set(user_data['task_data'])
            
            print(context.user_data.get('task_mode') )

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            if context.user_data.get('task_mode') == "manual":
                user_data.pop('task_state', None)
                user_data.pop('selected_priority', None)
                user_data['pending_task'] = task_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                await manual_task_assignment(update, context, user_id, task_id)
            else:
                result = auto_assign_task_with_priority(user_id, task_id)
                if result == "need_confirmation":
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞! –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏? (/yes –∏–ª–∏ /no)",
                        reply_markup=ReplyKeyboardMarkup([['/yes', '/no']], resize_keyboard=True)
                    )
                    user_data['pending_task'] = task_id
                else:
                    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ¬´{user_data['task_data']['name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            # =============================================
            
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–±—â–∞—è –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
                user_data.pop('task_data', None)
                user_data.pop('task_state', None)
                user_data.pop('selected_priority', None)
            
        else:
           print(f"–∏–¥–∏ –Ω–∞—Ö—É–π))))")


async def manual_task_assignment(update: Update, context: CallbackContext, user_id: str, task_id: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤"""
    user_data = context.user_data
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ (–ø–æ 30 –º–∏–Ω—É—Ç)
    blocks_needed = ceil(user_data['task_data']['time_required'] * 2)
    user_data['blocks_remaining'] = blocks_needed
    user_data['selected_blocks'] = []
    user_data['task_state'] = 'awaiting_manual_blocks'
    
    await update.message.reply_text(
        f"üïí –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å {blocks_needed} –ø–æ–ª—É—á–∞—Å–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤.\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 14:00):"
    )


async def handle_manual_blocks(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤"""
    user_id = str(update.effective_user.id)
    user_data = context.user_data
    text = update.message.text
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        block_time = datetime.strptime(text, "%d.%m.%Y %H:%M")
        block_str = block_time.strftime("%Y-%m-%d %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞ (–≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        if not is_time_block_available(user_id, block_str):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –±–ª–æ–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫
        user_data['selected_blocks'].append(block_str)
        user_data['blocks_remaining'] -= 1
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â–µ –±–ª–æ–∫–∏
        if user_data['blocks_remaining'] > 0:
            await update.message.reply_text(
                f"üïí –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å {user_data['blocks_remaining']} –±–ª–æ–∫–æ–≤.\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫:"
            )
        else:
            # –í—Å–µ –±–ª–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            schedule_ref = db.reference(f"schedule/{user_id}")
            
            for block in user_data['selected_blocks']:
                date_str, time_str = block.split(' ')
                time_key = time_str  # HH:MM
                
                schedule_ref.child(date_str).child(time_key).update({
                    'task_id': user_data['pending_task'],
                    'task': user_data['task_data']['name'],
                    'type': 'task'
                })
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ ¬´{user_data['task_data']['name']}¬ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏: {', '.join(user_data['selected_blocks'])}"
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            for key in ['task_state', 'selected_blocks', 'blocks_remaining', 'pending_task']:
                user_data.pop(key, None)
                
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")   


def is_time_block_available(user_id: str, block_time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
    date_str, time_str = block_time_str.split(' ')
    time_key = time_str # HH:MM
    
    schedule_ref = db.reference(f"schedule/{user_id}/{date_str}")

    print(db.reference(f"schedule/{user_id}/{date_str}").get())

    day_schedule = schedule_ref.get() or {}
    
    print(day_schedule.get(time_key, {}).get('type'))

    return day_schedule.get(time_key, {}).get('type') == 'free'        


# ------------------- 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º -------------------
async def auto_assign_task_with_priority(user_id: str, task_id: str):
    
    task = db.reference(f"tasks/{user_id}/{task_id}").get()
    time_needed = task["time_required"] * 2  # –ë–ª–æ–∫–∏ –ø–æ 30 –º–∏–Ω
    deadline = datetime.strptime(task["deadline"], "%Y-%m-%d")
    assigned_blocks = []

    current_date = datetime.now()
    while current_date <= deadline and time_needed > 0:
        date_str = current_date.strftime("%Y-%m-%d")
        day_schedule = db.reference(f"schedule/{user_id}/{date_str}").get()

        free_blocks = [
            time for time, block in day_schedule.items()
            if block["type"] == "free" and not block.get("task")
        ][:6]  # –ù–µ –±–æ–ª–µ–µ 6 –±–ª–æ–∫–æ–≤ –≤ –¥–µ–Ω—å

        for time in free_blocks:
            assigned_blocks.append({"date": date_str, "time": time})
            time_needed -= 1

        current_date += timedelta(days=1)

    if time_needed > 0:
        if task["priority"] in ("high", "medium"):
            return "need_confirmation"
        else:
            reschedule_low_priority_tasks(user_id, task_id, time_needed)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫–∏
    db.reference(f"tasks/{user_id}/{task_id}/assigned_blocks").set(assigned_blocks)
    for block in assigned_blocks:
        db.reference(f"schedule/{user_id}/{block['date']}/{block['time']}").update({"task": task_id})
    return "assigned"


# ------------------- 5. –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á -------------------
async def reschedule_low_priority_tasks(user_id: str, new_task_id: str, blocks_needed: int):
    tasks_ref = db.reference(f"tasks/{user_id}")
    new_task_priority = tasks_ref.child(new_task_id).get()["priority"]

    for task_id, task_data in tasks_ref.get().items():
        if PRIORITIES[task_data["priority"]] < PRIORITIES[new_task_priority]:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á—É
            new_blocks = find_free_blocks_after_deadline(user_id, task_data["deadline"])
            if new_blocks:
                tasks_ref.child(task_id).child("assigned_blocks").set(new_blocks)
                blocks_needed -= len(task_data["assigned_blocks"])
                if blocks_needed <= 0:
                    break


# ------------------- 6. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ -------------------
async def delete_task(update: Update, context: CallbackContext):
    task_name = " ".join(context.args)
    user_id = str(update.message.chat.id)
    tasks_ref = db.reference(f"tasks/{user_id}")
    
    tasks = tasks_ref.get()
    if not tasks:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    for task_id, task_data in tasks.items():
        print(task_id, task_data)
        if task_data["name"] == task_name:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏
            for block in task_data.get("assigned_blocks", []):
                db.reference(f"schedule/{user_id}/{block['date']}/{block['time']}").update({"task": None})
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            tasks_ref.child(task_id).delete()
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ¬´{task_name}¬ª —É–¥–∞–ª–µ–Ω–∞!")
            return

    await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")                
                
async def cancel_task(update: Update, context: CallbackContext):
    if 'task_state' in context.user_data:
        del context.user_data['task_state']
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        

# ------------------- 7. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è -------------------
async def show_schedule(update: Update, context: CallbackContext):
    user_id = str(update.message.chat.id)
    date = datetime.now().strftime("%Y-%m-%d")
    schedule_ref = db.reference(f"schedule/{user_id}/{date}")

    schedule_text = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}*\n\n"
    for time, block in schedule_ref.get().items():
        if block["type"] != "sleep":
            schedule_text += f"- {time}: {block.get('task', '–°–≤–æ–±–æ–¥–Ω–æ')}\n"

    await update.message.reply_text(schedule_text, parse_mode="Markdown")
    
async def show_daily_plan(update: Update, context: CallbackContext):
    user_id = str(update.message.chat.id)
    today = datetime.now().strftime("%Y-%m-%d")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    schedule_ref = db.reference(f"schedule/{user_id}/{today}")
    daily_schedule = schedule_ref.get() or {}
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_ref = db.reference(f"tasks/{user_id}")
    all_tasks = tasks_ref.get() or {}

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    plan_text = "üìÖ *–í–∞—à –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
    tasks_found = False

    for time_slot, slot_data in daily_schedule.items():
        if slot_data.get("task"):
            task_id = slot_data["task"]
            task = all_tasks.get(task_id, {})
            
            plan_text += (
                f"‚è∞ *{time_slot}*\n"
                f"‚Ä¢ {task.get('name', '–ó–∞–¥–∞—á–∞')}\n"
                f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.get('priority', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚Ä¢ –ó–∞–º–µ—Ç–∫–∏: {task.get('notes', '–Ω–µ—Ç')}\n\n"
            )
            tasks_found = True

    if not tasks_found:
        plan_text = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç. –û—Ç–¥—ã—Ö–∞–π—Ç–µ! üòä"

    await update.message.reply_text(plan_text, parse_mode="Markdown")
    
    
async def show_tasks(update: Update, context: CallbackContext):
    user_id = str(update.message.chat.id)
    tasks_ref = db.reference(f"tasks/{user_id}")
    tasks = tasks_ref.get() or {}

    if not tasks:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–µ/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)
    active_tasks = []
    overdue_tasks = []
    today = datetime.now().date()

    for task_id, task_data in tasks.items():
        deadline = datetime.strptime(task_data['deadline'], "%Y-%m-%d").date()
        if deadline < today:
            overdue_tasks.append(task_data)
        else:
            active_tasks.append(task_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"

    if active_tasks:
        message_text += "üîπ *–ê–∫—Ç–∏–≤–Ω—ã–µ:*\n"
        for task in active_tasks:
            message_text += format_task(task) + "\n\n"

    if overdue_tasks:
        message_text += "üî¥ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:*\n"
        for task in overdue_tasks:
            message_text += format_task(task) + "\n\n"

    await update.message.reply_text(message_text, parse_mode="Markdown")

def format_task(task: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—Å—Ç"""
    return (
        f"‚Ä¢ *{task['name']}*\n"
        f"  ‚è≥ {task['time_required']} —á | "
        f"üìÖ {task['deadline']}\n"
        f"  üè∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.get('priority', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"  üìù {task.get('notes', '–±–µ–∑ –∑–∞–º–µ—Ç–æ–∫')}"
    )    

# ------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -------------------
def main():
    
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addtask", add_task_start))
    application.add_handler(CommandHandler("deletetask", delete_task))
    application.add_handler(CommandHandler("schedule", show_schedule))
    application.add_handler(CommandHandler("cancel", cancel_task))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    
    application.add_handler(MessageHandler(filters.Regex("^üìù –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å$"), show_daily_plan))
    application.add_handler(MessageHandler(filters.Regex("^üóÇ –ó–∞–¥–∞—á–∏$"), show_tasks))
    application.add_handler(MessageHandler(filters.Regex("^üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ$"), show_schedule))
    
    application.add_handler(CallbackQueryHandler(ask_priority, pattern="^(auto|manual)$"))
    application.add_handler(CallbackQueryHandler(handle_task_input, pattern="^(urgent üî¥|high üü†|medium üü°|low ‚ö™)$"))
    
    application.add_handler(MessageHandler(
    filters.TEXT & ~filters.COMMAND & 
    (filters.Regex(r"\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}") | 
     filters.Regex(r"^\d{1,2}\.\d{1,2}\.\d{4} \d{1,2}:\d{2}$")),
    handle_manual_blocks
    ))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_input))

    application.run_polling()

if __name__ == "__main__":
    main()